{"version":3,"sources":["webpack:///src/app/view/app-view.component.ts","webpack:///src/app/view/app-view.component.html","webpack:///src/app/calendar/calendar.component.ts","webpack:///src/app/calendar/calendar.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/config/config.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/calendar/calendar-item/calendar-item.component.ts","webpack:///src/app/calendar/calendar-item/calendar-item.component.html","webpack:///src/app/calendar/months-row/months-row.component.ts","webpack:///src/app/calendar/months-row/months-row.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/calendar/pop-up/pop-up.component.ts","webpack:///src/app/calendar/pop-up/pop-up.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AppViewComponent","configService","requestForm","year","required","repoUrl","getCommits","replace","sinceDate","Date","value","untilDate","Number","getData","urlToLocation","subscribe","commits","response","Promise","resolve","$event","target","select","selector","templateUrl","styleUrls","CalendarComponent","changes","currentValue","then","collection","setItems","appendCommits","calendarItems","forEach","calendarItem","idx","commitsTmp","date","commit","committer","substring","toISOString","push","percent","parseFloat","length","toPrecision","month","numberOfDays","getDate","dateValue","environment","production","ConfigService","httpClient","repoLocation","get","params","providedIn","AppComponent","title","template","CalendarItemComponent","popUpVisibility","MonthsRowComponent","_month","Intl","DateTimeFormat","format","calendarMonth","AppModule","declarations","imports","providers","bootstrap","PopUpComponent","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ConfigService, Commit, Response } from '../config/config.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-view',\n  templateUrl: './app-view.component.html',\n  styleUrls: ['./app-view.component.sass']\n})\nexport class AppViewComponent implements OnInit {\n  public response: Response\n  public requestForm = new FormGroup({\n    year: new FormControl('2019', Validators.required),\n    repoUrl: new FormControl('https://github.com/angular/angular', Validators.required),\n  })\n\n  constructor(private configService: ConfigService) {\n  }\n\n  public ngOnInit(): void {\n    this.getCommits()\n  }\n\n  private urlToLocation(repoUrl: string): string {\n    return repoUrl.replace(\"https://github.com/\", \"\")\n  }\n\n  //Retrieves the commits for the given repository in the specified year\n  public getCommits(): void {\n    //Define since and until dates\n    const sinceDate: Date = new Date(this.requestForm.value.year, 0, 1)\n    const untilDate: Date = new Date(Number(this.requestForm.value.year) + 1, 0, 1)\n\n    //Retrieve commits from ConfigService and assign them to response object\n    this.configService\n      .getData(this.urlToLocation(this.requestForm.value.repoUrl), sinceDate, untilDate)\n      .subscribe((commits: Commit[]) => {\n        this.response = {\n          year: this.requestForm.value.year,\n          commits: new Promise((resolve) => resolve(commits))\n        }\n    })\n  }\n\n}\n","<div class=\"position-block\">\n  <div class=\"d-flex\">\n    <img src=\"assets/github_logo.svg\" width=\"50px\"/>\n    <h2>Commits during</h2>\n    <form class=\"d-flex\" [formGroup]=\"requestForm\" (ngSubmit)=\"getCommits()\">\n      <input class=\"year\" type=number placeholder=\"Enter year\" formControlName=\"year\">\n      <h2>in repo</h2>\n      <input class=\"url\" type=string placeholder=\"Repo address\" formControlName=\"repoUrl\" (click)=\"$event.target.select()\">\n      <button class=\"submit-button\" type=\"submit\" [disabled]=\"!requestForm.valid\">\n        <h2 class=\"button-text\">↵ Enter</h2>\n      </button>\n    </form>\n  </div>\n  <calendar\n    [response]=\"response\">\n  </calendar>\n</div>\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { Commit, Response } from '../config/config.service';\n\nexport interface CommitsRequest {\n  year: number;\n  repoUrl: string;\n}\n\nexport interface CalendarItem {\n  date: Date;\n  commits: any[];\n  percent: number;\n}\n\n@Component({\n  selector: 'calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.sass']\n})\nexport class CalendarComponent {\n  @Input() response: Response\n\n  public calendarItems: CalendarItem[]\n  public collection: Commit[]\n\n  // Define a lifecycle hook to handle changes to the component's input\n  public ngOnChanges(changes: SimpleChanges) {\n    if(changes.response && changes.response.currentValue) {\n      // When the response changes, fetch the commits and update the calendar items\n      this.response.commits.then((commits: Commit[]) => {\n        this.collection = commits\n        this.setItems(this.response.year).appendCommits(commits)\n      })\n    }\n  }\n\n  // A method to append commits to the calendar items\n  public appendCommits(commits: Commit[]): void {\n    this.calendarItems.forEach((calendarItem: CalendarItem, idx: number) => {\n      const commitsTmp: string[] = []\n      // For each calendar item, find any commits that occurred on that date\n      commits.forEach(({ commit: { committer: { date }}}) => {\n        if(date.substring(0,10) == calendarItem.date.toISOString().substring(0,10)) {\n          commitsTmp.push(date)\n          this.calendarItems[idx].commits = commitsTmp\n          this.calendarItems[idx].percent = Number.parseFloat(((commitsTmp.length / commits.length) * 100).toPrecision(2))\n        }\n      })\n    })\n  }\n\n  // A method to initialize the calendar items for a given year\n  public setItems(year: number): CalendarComponent {\n    this.calendarItems = []\n    for (let month = 1; month <= 12; month++) {\n      const numberOfDays: number = new Date(year, month, 0).getDate();\n      // For each month in the year, create calendar items for each day of the month\n      for (let date = 1; date <= numberOfDays; date++) {\n        const dateValue: Date = new Date(year, (month-1), date)\n        this.calendarItems.push({\n          date: dateValue,\n          commits: [],\n          percent: 0,\n        })\n      }\n    }\n    return this\n  }\n\n}\n","<div class=\"grid\">\n  <ng-container *ngFor=\"let calendarItem of calendarItems\">\n    <ng-container *ngIf=\"calendarItem.date.getDate() == 1\">\n      <months-row class=\"month-row\" [calendarMonth]=\"calendarItem.date\"></months-row>\n    </ng-container>\n    <calendar-item [calendarItem]=\"calendarItem\"></calendar-item>\n  </ng-container>\n</div>\n<ng-container *ngIf=\"collection && !collection.length\">\n  <h1 class=\"empty-state\">⛱ Nothing here</h1>\n</ng-container>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Commit {\n  commit: {\n    committer: {\n      date: string;\n    };\n  };\n}\n\nexport interface Response {\n  year: number;\n  commits: Promise<Commit[]>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  constructor( private httpClient: HttpClient ) { }\n\n  // Retrieve commit data from GitHub API for a specific repo within a date range\n  public getData(repoLocation: string, sinceDate: Date, untilDate: Date): Observable<Object> {\n    return this.httpClient.get(`https://api.github.com/repos/${repoLocation}/commits`, {\n      params: {\n        \"since\": `${sinceDate.toISOString()}`, // Start of date range\n        \"until\": `${untilDate.toISOString()}`, // End of date range\n        \"per_page\": \"500\", // Max number of commits to retrieve per page\n      },\n    })\n  }\n\n}\n\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template:`\n    <app-view></app-view>\n  `,\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'graph-app';\n}\n","import { Component, Input } from '@angular/core';\nimport { CalendarItem } from 'src/app/calendar/calendar.component';\n\n@Component({\n  selector: 'calendar-item',\n  templateUrl: './calendar-item.component.html',\n  styleUrls: ['./calendar-item.component.sass']\n})\nexport class CalendarItemComponent {\n  @Input() calendarItem: CalendarItem\n\n  public popUpVisibility: boolean = false\n\n}\n","<pop-up *ngIf=\"popUpVisibility\" [calendarItem]=\"calendarItem\"></pop-up>\n<div\n  (mouseenter)=\"popUpVisibility = true\"\n  (mouseleave)=\"popUpVisibility = false\"\n  class=\"calendar-item-component calendar-item\"\n  [class.empty]=\"!calendarItem.commits.length\"\n  [class.less-than-ten]=\"calendarItem.percent > 0 && calendarItem.percent < 10\"\n  [class.less-than-twenty]=\"calendarItem.percent >= 10 && calendarItem.percent < 20\"\n  [class.less-than-fourty]=\"calendarItem.percent >= 20 && calendarItem.percent < 40\"\n  [class.more-than-fourty]=\"calendarItem.percent >= 40\">\n</div>\n\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'months-row',\n  templateUrl: './months-row.component.html',\n  styleUrls: ['./months-row.component.sass']\n})\nexport class MonthsRowComponent {\n  private _month: string\n\n  @Input()\n  public set calendarMonth(date: Date) {\n    this._month = new Intl.DateTimeFormat('en-US', { month: 'short' }).format(date)\n  }\n\n  public get month(): string {\n    return this._month\n  }\n}\n","<p class=\"calendar-month\">{{month}}</p>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { AppViewComponent } from './view/app-view.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { CalendarItemComponent } from './calendar/calendar-item/calendar-item.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MonthsRowComponent } from './calendar/months-row/months-row.component';\nimport { PopUpComponent } from './calendar/pop-up/pop-up.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AppViewComponent,\n    CalendarComponent,\n    CalendarItemComponent,\n    MonthsRowComponent,\n    PopUpComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { CalendarItem } from 'src/app/calendar/calendar.component';\n\n@Component({\n  selector: 'pop-up',\n  templateUrl: './pop-up.component.html',\n  styleUrls: ['./pop-up.component.sass']\n})\nexport class PopUpComponent implements OnInit {\n  @Input() calendarItem: CalendarItem\n\n  ngOnInit() {}\n\n}\n","<div class=\"pop-up\">\n  <p>{{calendarItem.date.getDate()}}.{{calendarItem.date.getMonth()}}.{{calendarItem.date.getFullYear()}}</p>\n  <p>commits: {{calendarItem.commits.length}}</p>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}